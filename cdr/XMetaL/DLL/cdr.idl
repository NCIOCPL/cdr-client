// Cdr.idl : IDL source for Cdr.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (Cdr.tlb) and marshalling code.

import "oaidl.idl";import "ocidl.idl";
	
	[
		object,
		uuid(744ECEA9-3F8F-497C-ABCA-2A6C4C653466),
		dual,
		helpstring("ICommands Interface"),
		pointer_default(unique)
	]
	interface ICommands : IDispatch
	{
		[id(1), helpstring("method logon")] HRESULT logon([out, retval] int* pRet);
		[id(2), helpstring("method retrieve")] HRESULT retrieve([out, retval] int* pRet);
		[id(8), helpstring("method search")] HRESULT search([out, retval] int* pRet);
		[id(9), helpstring("method save")] HRESULT save([out, retval] int* pRet);
		[id(10), helpstring("method validate")] HRESULT validate([out, retval] int* pRet);
		[id(11), helpstring("method logoff")] HRESULT logoff([out, retval] int* pRet);
		[id(12), helpstring("method edit")] HRESULT edit([out, retval] int* pRet);
		[id(13), helpstring("method isReadOnly")] HRESULT isReadOnly([in] const BSTR* docType, [in] const BSTR* elemName, [out, retval] BOOL* pVal);
		[id(14), helpstring("method advancedSearch")] HRESULT advancedSearch([out, retval] int* retVal);
		[propget, id(15), helpstring("Name of account used to log into the CDR")] HRESULT username([out, retval] BSTR *pVal);
		[id(17), helpstring("method protUpdPerson")] HRESULT protUpdPerson([out, retval] int* pRet);
		[id(18), helpstring("method getPersonAddress")] HRESULT getPersonAddress([out, retval] int* pRet);
		[id(19), helpstring("method particOrgs")] HRESULT particOrgs([out, retval] int* pRet);
		[id(20), helpstring("method getOrgAddress")] HRESULT getOrgAddress([out, retval] int* pRet);
		[id(21), helpstring("method pasteDocLink")] HRESULT pasteDocLink(const BSTR*val, [out, retval] int* pRet);
		[propget, id(22), helpstring("property session")] HRESULT session([out, retval] BSTR *pVal);
		[id(23), helpstring("method checkIn")] HRESULT checkIn([out, retval] int* pRet);
		[propget, id(24), helpstring("DNS name for CDR host")] HRESULT hostname([out, retval] BSTR *pVal);
        [id(25), helpstring("method showPage")] HRESULT showPage([in] const BSTR* url, [out,retval]  int* pRet);
        [id(26), helpstring("method glossify")] HRESULT glossify(void);
        [id(27), helpstring("method addGlossaryPhrase")] HRESULT addGlossaryPhrase(void);
        [id(28), helpstring("method setTitleBar")] HRESULT setTitleBar(void);
        [id(29), helpstring("method acceptOrRejectMarkup")] HRESULT acceptOrRejectMarkup(void);
        [id(30), helpstring("method launchBlob")] HRESULT launchBlob([in] const BSTR* docId, [in] const BSTR* docVer);
		[id(31), helpstring("method openCdrDoc")] HRESULT openCdrDoc([in] const BSTR* docId, [in] const BSTR* docVer, [in] VARIANT_BOOL checkOut);
        [id(32), helpstring("method getTranslatedDocId")] HRESULT getTranslatedDocId([in] const BSTR* originalId, [out, retval] BSTR* translatedDocId);
        [id(34), helpstring("method getDiagnosisSetTerms")] HRESULT getDiagnosisSetTerms([out,retval] BSTR* termIds);
        [id(35), helpstring("method getGlossaryTermNames")] HRESULT getGlossaryTermNames([in] const BSTR* conceptId, [out,retval] BSTR* termNames);
        [id(36), helpstring("method getGlossaryTermNameIds")] HRESULT getGlossaryTermNameIds([in] const BSTR* conceptId, [out,retval] BSTR* termNameIds);
        [id(37), helpstring("method getPatientDocId")] HRESULT getPatientDocId([in] const BSTR* hpDocId, [out, retval] BSTR* patientDocId);
        [id(38), helpstring("method getNextValidationError")] HRESULT getNextValidationError([out,retval] BSTR* valError);
        [id(39), helpstring("method logClientEvent")] HRESULT logClientEvent([in] const BSTR* description, [out,retval] int* pRet);
    };

[
	uuid(D268DB6C-44A0-4A9B-8F92-4D61120F7EAE),
	version(1.0),
	helpstring("Cdr 1.0 Type Library")
]
library CDRLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	
	[
		uuid(41A6D40C-952F-4E4C-B329-CE529E4F3C16),
		helpstring("Commands Class")
	]
	coclass Commands
	{
		[default] interface ICommands;
	};
};
